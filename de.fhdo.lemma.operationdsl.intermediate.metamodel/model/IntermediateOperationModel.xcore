@Ecore(nsURI="http://www.fhdo.de/lemma/operation/intermediate", nsPrefix="intermediate")
package de.fhdo.lemma.operation.intermediate

import de.fhdo.lemma.data.intermediate.IntermediateImport
import de.fhdo.lemma.service.intermediate.IntermediateEndpoint
import de.fhdo.lemma.service.intermediate.MicroserviceReference
import de.fhdo.lemma.service.MicroserviceType
import de.fhdo.lemma.service.Visibility

/**
 * Metamodel of intermediate operation models.
 *
 * @author <a href="mailto:philip.wizenty@fh-dortmund.de">Philip Wizenty</a>
 */

class IntermediateOperationModel {
    // "file" URI to the source model from which this intermediate model was derived
    String sourceModelUri

    contains IntermediateImport[] imports
    contains IntermediateContainer[] containers opposite operationModel
    contains IntermediateInfrastructureNode[] infrastructureNodes opposite operationModel
}

/**
 * An intermediate operation node is a node to which services may be deployed, e.g., a container or
 * some infrastructure component like a configuration provider or database
 */
abstract class IntermediateOperationNode {
    String name

    refers IntermediateImport[1..*] imports
    refers IntermediateOperationEnvironment operationEnvironment
    contains OperationMicroserviceReference[] deployedServices opposite service
    contains IntermediateEndpoint[1..*] endpoints
    contains IntermediateServiceDeploymentSpecification[] specifications opposite operationNode
}

/**
 * A intermediate container is the central operation node. It enables service deployment
 * and operation.
 */
class IntermediateContainer extends IntermediateOperationNode {
    contains IntermediateDeploymentTechnologyReference technologyReference opposite ^container

    container IntermediateOperationModel operationModel opposite containers
}

/**
 * An intermediate infrastructure node is an operation node with supporting character,
 * e.g., a configuration provider
 */
class IntermediateInfrastructureNode extends IntermediateOperationNode {
    //Intermediate operation nodes which the intermediate infrastructure node depends on, eg.g.,
    //a service discovery or database
    refers IntermediateOperationNode[] dependsOnNodes
    //Intermediate operation nodes which are using functions of the intermediate infrastructure
    //node, e.g., the provisioning of configuration parameters
    refers IntermediateOperationNode[] usedByNodes

    contains IntermediateInfrastructureTechnologyReference reference opposite infrastructureNode

    container IntermediateOperationModel operationModel opposite infrastructureNodes
}

/**
 * Represents the further specification of a service being deployed to an
 * intermediate operation node
 */
class IntermediateServiceDeploymentSpecification {
    contains OperationMicroserviceReference service opposite specification
    contains IntermediateTechnologySpecificPropertyValue[] propertyValues opposite specification
    contains IntermediateEndpoint[1..*] endpoints

    container IntermediateOperationNode operationNode opposite specifications
}

 /**
 * Intermediate operation environment of an intermediate operation technology, e.g., an image
 * of a deployment container
 */
class IntermediateOperationEnvironment {
    String environmentName
    boolean ^default="false"

    container IntermediateOperationTechnology operationTechnology opposite environments
}

 /**
 * Abstract superclass of technologies specific to intermediate service operation
 */
abstract class IntermediateOperationTechnology {
    String name

    contains IntermediateOperationEnvironment[1..*] environments opposite operationTechnology
    contains IntermediateTechnologySpecificProperty[] propertys opposite operationTechnology
}

/**
 * Intermediate operation technology for service deployment
 */
class IntermediateDeploymentTechnology extends IntermediateOperationTechnology {
}

/**
 * Intermediate operation technology for infrastructure deployment
 */
class IntermediateInfrastructureTechnology extends IntermediateOperationTechnology {
}

/**
 * Reference to a infrastructure technology
 */
class IntermediateInfrastructureTechnologyReference {
    refers IntermediateImport ^import
    refers IntermediateInfrastructureTechnology infrastructureTechnology

    container IntermediateInfrastructureNode infrastructureNode opposite reference
}

/**
 * Represents a reference to a intermediate technology
 */
class IntermediateDeploymentTechnologyReference {
    refers IntermediateDeploymentTechnology deploymentTechnology
    refers IntermediateImport ^import

    container IntermediateContainer  ^container opposite technologyReference
}

 /**
 * A property, e.g., of an intermediate operation technology that may be set per associated
 * service or an aspect
 */
class IntermediateTechnologySpecificProperty {
    String name
    String ^type
    String defaultValue
    String[] featureames

    contains IntermediateTechnologySpecificPropertyValue[0..1] propertyValue opposite property

    container IntermediateOperationTechnology operationTechnology opposite propertys
}

 /**
 * Value assignment to a intermediate technology specific property
 */
class IntermediateTechnologySpecificPropertyValue {
    String value

    container IntermediateServiceDeploymentSpecification specification opposite propertyValues
    container IntermediateTechnologySpecificProperty property opposite propertyValue
}

/**
 * Reference to a operational microservice
 */
class OperationMicroserviceReference extends MicroserviceReference {
    boolean effectivelyImplemented
    MicroserviceType microserviceType
    Visibility visibility

    refers IntermediateImport intermediateImport

    container IntermediateOperationNode service opposite deployedServices
    container IntermediateServiceDeploymentSpecification specification opposite service
}