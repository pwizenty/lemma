@Ecore(nsURI="http://www.fhdo.de/lemma/operation/intermediate", nsPrefix="intermediate")
package de.fhdo.lemma.operation.intermediate
	
import de.fhdo.lemma.data.intermediate.IntermediateImport
import de.fhdo.lemma.service.intermediate.IntermediateEndpoint
import de.fhdo.lemma.service.intermediate.MicroserviceReference
import de.fhdo.lemma.service.MicroserviceType
import de.fhdo.lemma.service.Visibility

/**
 * Metamodel of intermediate operation models.
 *
 * @author <a href="mailto:philip.wizenty@fh-dortmund.de">Philip Wizenty</a>
 */

 class IntermediateOperationModel {
 	// "file" URI to the source model from which this intermediate model was derived
    String sourceModelUri
    
    contains IntermediateImport[] imports
    contains IntermediateContainer[] intermediateContainer opposite intermediateOperationModel
    contains IntermediateInfrastructureNode[] intermediateInfrastructureNode opposite intermediateOperationModel
 }
 
/**
 * An intermediate operation node is a node to which services may be deployed, e.g., a container or some
 * infrastructure component like a configuration provider or database
 */
 abstract class IntermediateOperationNode {
 	String name
 	
 	refers IntermediateImport[1..*] intermediateImport
 	refers IntermediateOperationEnvironment intermediateOperationEnvironment
 	refers OperationMicroserviceReference[] operationMicroserviceReferences
 	
 	contains IntermediateServiceDeploymentSpecification[] intermediateServiceDeploymentSpecification opposite intermediateOperationNode
 }
 
/**
 * A intermediate container is the central operation node. It enables service deployment and operation.
 */
 class IntermediateContainer extends IntermediateOperationNode {
 	contains IntermediateDeploymentTechnologyReference intermediateDeploymentTechnologyReference opposite intermediateContainer
 	contains IntermediateEndpoint[1..*] intermediateEndpoint
 	
 	container IntermediateOperationModel intermediateOperationModel opposite intermediateContainer
 	
 }
 
/**
 * An intermediate infrastructure node is an operation node with supporting character, e.g., a configuration
 * provider
 */
 class IntermediateInfrastructureNode extends IntermediateOperationNode {
 	//Intermediate operation nodes which the intermediate infrastructure node depends on, eg.g., a service discovery or database
 	refers IntermediateOperationNode[] dependentOperationNodes
 	//Intermediate operation nodes which are using functions of the intermediate infrastructure node, e.g., the provisioning of configuration parameters
 	refers IntermediateOperationNode[] usedByOperationNodes
 	
 	contains IntermediateInfrastructureTechnologyReference intermediateInfrastructureTechnologyReference opposite intermediateInfrastructureNode
 	contains IntermediateEndpoint[1..*] intermediateEndpoint
 	
 	container IntermediateOperationModel intermediateOperationModel opposite intermediateInfrastructureNode
 }
 
/**
 * Represents the further specification of a service being deployed to an intermediate operation node
 */
 class IntermediateServiceDeploymentSpecification {
 	refers OperationMicroserviceReference operationMicroserviceReference
 	
 	contains IntermediateTechnologySpecificPropertyValue[] intermediateTechnologySpecificPropertyValue opposite intermediateServiceDeploymentSpecification
 	contains IntermediateEndpoint[1..*] intermediateEndpoints
 	
 	container IntermediateOperationNode intermediateOperationNode opposite intermediateServiceDeploymentSpecification
 }
 
 /**
 * Intermediate operation environment of an intermediate operation technology, e.g., an image of a deployment container
 */
 class IntermediateOperationEnvironment {
 	String environmentName
 	boolean ^default
 	
 	container IntermediateOperationTechnology intermediateOperationtechnology opposite intermediateOperationEnvironment
 }
 
 /**
 * Abstract superclass of technologies specific to intermediate service operation
 */
 abstract class IntermediateOperationTechnology {
 	String name
 	
 	contains IntermediateOperationEnvironment[1..*] intermediateOperationEnvironment opposite intermediateOperationtechnology
 	contains IntermediateTechnologySpecificProperty[] intermediateTechnologySpecificProperty opposite intermediateOperationTechnology
 }
 
/**
 * Intermediate operation technology for service deployment
 */
 class IntermediateDeploymentTechnology extends IntermediateOperationTechnology {
 	//TODO: is this component needed?
 }
 
/**
 * Intermediate operation technology for infrastructure deployment
 */
 class IntermediateInfrastructureTechnology extends IntermediateOperationTechnology {
 	//TODO: is this component needed?
 } 
 
 
 
/**
 * Reference to a infrastructure technology
 */
 class IntermediateInfrastructureTechnologyReference {
 	refers IntermediateImport intermediateImport
 	refers IntermediateInfrastructureTechnology intermediateInfrastructureTechnology
 	
 	container IntermediateInfrastructureNode intermediateInfrastructureNode opposite intermediateInfrastructureTechnologyReference
 }
 
/**
 * Represents a reference to a intermediate technology
 */
 class IntermediateDeploymentTechnologyReference {
 	refers IntermediateDeploymentTechnology intermediateDeploymentTechnology
 	refers IntermediateImport intermediateImport
 	
 	container IntermediateContainer intermediateContainer opposite intermediateDeploymentTechnologyReference
 }
 
 /**
 * A property, e.g., of an intermediate operation technology that may be set per associated service or an aspect
 */
 class IntermediateTechnologySpecificProperty {
 	String name
 	String ^type
 	String defaultValue
 	String[] featureames
 	
 	contains IntermediateTechnologySpecificPropertyValue[0..1] intermediateTechnologySpecificPropertyValue opposite intermediateTechnologySpecificProperty
 	
 	container IntermediateOperationTechnology intermediateOperationTechnology opposite intermediateTechnologySpecificProperty
 }
 
 /**
 * Value assignment to a intermediate technology specific property
 */
 class IntermediateTechnologySpecificPropertyValue {
 	String value
 	
 	container IntermediateServiceDeploymentSpecification intermediateServiceDeploymentSpecification opposite intermediateTechnologySpecificPropertyValue
 	container IntermediateTechnologySpecificProperty intermediateTechnologySpecificProperty opposite intermediateTechnologySpecificPropertyValue
}
 
/**
 * Reference to a operational microservice
 */
class OperationMicroserviceReference extends MicroserviceReference {
	boolean effectivelyImplemented
	MicroserviceType microserviceType
	Visibility visibility
	
	refers IntermediateImport intermediateImport
}
 
 
